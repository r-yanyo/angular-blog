{
  "id": "32s2lm8zltUSIiARAJwepJ",
  "title": "記事を目次ページに表示する方法",
  "date": "2018-01-29",
  "tags": [
    "JavaScript",
    "blog"
  ],
  "content": "<p>自分でも忘れかけているのでメモ。<br>フロントエンドからaxiosでリクエストが来た時に、サーバ側がどうやってmarkdownファイルの情報を送っているか見てみます。</p>\n<p>以下に示すのは目次ページに必要な要素を供給する部分です。</p>\n<pre><code class=\"language-js\">  server.get(&#39;/api/articles&#39;, (req,res) =&gt; {\n    fs.readdir(`./markdowns/articles`,&#39;utf-8&#39;,(err,files) =&gt; {\n      if(err){\n        res.status(400)\n        res.send()\n      }\n      let metas = []\n      files.forEach((file)=&gt;{\n        if(file.match(&#39;.md&#39;)){\n          const data = fs.readFileSync(`./markdowns/articles/${file}`,&#39;utf-8&#39;)\n          const meta = frontMatter(data)\n          const tags = Array.isArray(meta.attributes.tags) ? meta.attributes.tags : new Array(meta.attributes.tags); //配列ではない要素の場合も配列化する\n          metas.push({\n            filename: file.replace(&#39;.md&#39;,&#39;&#39;),\n            title: meta.attributes.title,\n            subtitle: meta.attributes.subtitle,\n            date: meta.attributes.date,\n            tags: tags\n          })\n        }\n      })\n      metas.sort((a,b)=&gt;{\n        const aDate = parseInt(a.date.replace(/[^0-9]/g,&quot;&quot;),10);\n        const bDate = parseInt(b.date.replace(/[^0-9]/g,&quot;&quot;),10);\n        return bDate - aDate\n      })\n      const metasJSON = JSON.stringify(metas)   \n      res.status(200)\n      res.json(metasJSON)\n    }) \n  })\n</code></pre>\n<p>フロント側が/api/articlesにアクセスして来たら、Markdownディレクトリをロードします。</p>\n<pre><code class=\"language-js\">  server.get(&#39;/api/articles&#39;, (req,res) =&gt; {\n    fs.readdir(`./markdowns/articles`,&#39;utf-8&#39;,(err,files) =&gt; {\n      if(err){\n        res.status(400)\n        res.send()\n      }\n\n    ・・・\n\n  }\n</code></pre>\n<p>Markdonwディレクトリを読み込んだ後にMarkdownファイルを一つずつ処理します。ここで行うのは目次に表示するためのメタ情報「タイトル」「タグ」「日時」などを取り出す処理です。</p>\n<pre><code class=\"language-js\">\n  ・・・\n\n  let metas = []\n    files.forEach((file)=&gt;{\n      if(file.match(&#39;.md&#39;)){\n        const data = fs.readFileSync(`./markdowns/articles/${file}`,&#39;utf-8&#39;)\n        const meta = frontMatter(data)\n        const tags = Array.isArray(meta.attributes.tags) ? meta.attributes.tags : new Array(meta.attributes.tags); //配列ではない要素の場合も配列化する\n        metas.push({\n          filename: file.replace(&#39;.md&#39;,&#39;&#39;),\n          title: meta.attributes.title,\n          subtitle: meta.attributes.subtitle,\n          date: meta.attributes.date,\n          tags: tags\n        })\n      }\n    })\n\n    ・・・\n</code></pre>\n<p>メタ情報の取得には「frontMatter」を使っています。<br>frontMatterはMarkdownファイルの先頭に以下のようにメタ情報を書くとそれを認識してくれます。<br>処理が終わったら変数metasにプッシュしていきます。</p>\n<pre><code>---\ntitle: 記事を目次ページに表示する方法\ndate: 2018年01月29日\ntags:\n- JavaScript\n- blog\n---\n</code></pre>\n<p>このままだと記事が目次に表示される順番がバラバラなので書いた日時でMarkdownファイルをソートします。</p>\n<pre><code class=\"language-js\">\n・・・\n\nmetas.sort((a,b)=&gt;{\n      const aDate = parseInt(a.date.replace(/[^0-9]/g,&quot;&quot;),10);\n      const bDate = parseInt(b.date.replace(/[^0-9]/g,&quot;&quot;),10);\n      return bDate - aDate\n    })\n    const metasJSON = JSON.stringify(metas)   \n    res.status(200)\n    res.json(metasJSON)\n  }) \n})\n</code></pre>\n<p>日時は「YYYY年MM月DD日」のようなフォーマットなので、単純に日時以外の要素を取り除き大きさを比較します。</p>\n<pre><code>例) \n2018年01月29日 -&gt; 20180129\n2017年12月30日 -&gt; 20171230\n\n20180129 &gt; 20171230\n</code></pre>\n<p>最後にJSONにしてフロントに送って終了です。</p>\n"
}