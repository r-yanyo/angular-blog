{
  "id": "1ndS3664yPYGxLzDMCppiu",
  "title": "Vue.js + Ruby on RailsでTodoリストアプリを作る。",
  "date": "2018-05-31",
  "tags": [
    "Vue.js",
    "Ruby on Rails"
  ],
  "content": "<h1>完成図</h1>\n<p><img src=\"//images.ctfassets.net/wcj80e9o9v1k/7BAQQZfKK1UOzGs6H2ziPM/c6990c30871d0fc2d097c90a75f345ff/tasks.png\" alt=\"tasks\"></p>\n<h1>コンセプト</h1>\n<p>フロントエンドとサーバサイドを完全に分ける。よって Rails の Webpacker を用いた Vue.js の使用はしない。</p>\n<h1>環境</h1>\n<p>Mac なので基本 homebrew でインストールしている。<br>環境でこけるのが一番萎えるので慎重に。</p>\n<ul>\n<li>Mac OS X</li>\n<li>node 10.0.0</li>\n<li>npm 5.6.0</li>\n<li>Vue 2.9.3</li>\n<li>Rails 5.1.6</li>\n</ul>\n<h1>早速 Todo リストアプリ作ろう。</h1>\n<p>サーバーサイドとフロントエンドを分けるので、それぞれフォルダも分かれます。</p>\n<h2>まずはサーバサイドから</h2>\n<p>まずはサーバサイドから作ります。単純な CRUD 機能(Create Read Update Delete)が出来ることを目指しましょう。但し今回は Update は省略しています。</p>\n<p>APi モードで rails new します。</p>\n<pre><code>$ rails new server --api\n</code></pre>\n<p>Todo リストアプリを作るので、「task」というモデルを作り、タスクを保存したり削除したり出来るようにします。タスクが持つ column は string 型の「text」だけとします。DB のマイグレーションも忘れず行う。</p>\n<pre><code>$ rails generate model task text:string\n$ rails db:migrate\n</code></pre>\n<p>次にコントローラーを作ります。</p>\n<pre><code>$ rails g controller api::tasks\n</code></pre>\n<p>tasks_controller.rb の中身を以下のようにします。</p>\n<pre><code class=\"language-ruby\">class Api::TasksController &lt; ApplicationController\n  def index\n    @tasks = Task.all\n    render json: @tasks\n  end\n\n  def create\n    @task = Task.new(task_params)\n    if @task.save\n      render json: &quot;create new task.\\n&quot;, status: 200\n    else\n      render json: &quot;fail to create.\\n&quot;, status: 500\n    end\n  end\n\n  def destroy\n    @task = Task.find(params[:id])\n    @task.destroy\n    render json: &quot;destroy a task.\\n&quot;\n  end\n\n  private\n    def task_params\n      params.require(:task).permit(:text)\n    end\nend\n</code></pre>\n<p>最後にルーティングを設定します。</p>\n<pre><code class=\"language-ruby\">Rails.application.routes.draw do\n  namespace :api, { format: &#39;json&#39; } do\n    resources :tasks\n  end\nend\n</code></pre>\n<p>これによりルーティングは以下のようになります。</p>\n<pre><code>$ rake routes\n       Prefix Verb   URI Pattern                   Controller#Action\n    api_tasks GET    /api/tasks(.:format)          api/tasks#index {:format=&gt;/json/}\n              POST   /api/tasks(.:format)          api/tasks#create {:format=&gt;/json/}\n new_api_task GET    /api/tasks/new(.:format)      api/tasks#new {:format=&gt;/json/}\nedit_api_task GET    /api/tasks/:id/edit(.:format) api/tasks#edit {:format=&gt;/json/}\n     api_task GET    /api/tasks/:id(.:format)      api/tasks#show {:format=&gt;/json/}\n              PATCH  /api/tasks/:id(.:format)      api/tasks#update {:format=&gt;/json/}\n              PUT    /api/tasks/:id(.:format)      api/tasks#update {:format=&gt;/json/}\n              DELETE /api/tasks/:id(.:format)      api/tasks#destroy {:format=&gt;/json/}\n</code></pre>\n<p>ターミナルから curl でテストしてみましょう。</p>\n<p>まず Rails サーバを立てます。</p>\n<pre><code>$ rails s\n</code></pre>\n<p>別ターミナルで、curl から rails サーバへリクエストを送ります。<br>まずは新しいタスクを作ってみましょう。</p>\n<pre><code>$ curl http://localhost:3000/api/tasks -X POST -d &#39;task[text]=洗濯する&#39;\ncreate new task.\n</code></pre>\n<p>次はそれを GET してみます。</p>\n<pre><code>$ curl http://localhost:3000/api/tasks\n[{&quot;id&quot;:1,&quot;text&quot;:&quot;洗濯する&quot;,&quot;created_at&quot;:&quot;2018-05-31T15:05:34.862Z&quot;,&quot;updated_at&quot;:&quot;2018-05-31T15:05:34.862Z&quot;}]\n</code></pre>\n<p>最後にそれを削除してみます。</p>\n<pre><code>$ curl http://localhost:3000/api/tasks/1 -X DELETE\ndestroy a task.\n</code></pre>\n<p>これでサーバ側は（だいたい）完成です。後からちょっと修正します。</p>\n<h2>次はフロントエンド</h2>\n<p>次はフロント側を Vue.js で作っていきます。<br>vue-cli で雛形を作っていきましょう。今回はテンプレとして webpack-simple を使います。</p>\n<pre><code>$ vue init webpack-simple client\n$ cd client\n$ npm install\n$ npm run dev\n</code></pre>\n<p>まずは GET メソッドを送ってタスクを入手できるようにしましょう。<br>src/app.js を以下のように変更します。</p>\n<pre><code class=\"language-js\">&lt;template&gt;\n  &lt;div id=&quot;app&quot;&gt;\n    &lt;ul id=&quot;task-list&quot;&gt;\n      &lt;li class=&quot;task&quot; v-for=&quot;task in tasks&quot;&gt;&lt;p&gt;{{ task.text }}&lt;/p&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport axios from &#39;axios&#39;;\n\nconst hostName = &#39;localhost:3000&#39;;\nconst path = &#39;/api/tasks&#39;\n\nexport default {\n  name: &#39;app&#39;,\n  data () {\n    return {\n      tasks: [],\n    }\n  },\n  methods: {\n    getTasks: function() {\n      axios.get(`http://${hostName}${path}`)\n        .then((response) =&gt; {\n          this.tasks = response.data;\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    }\n  },\n  mounted: function() {\n    this.getTasks();\n  }\n}\n&lt;/script&gt;\n</code></pre>\n<p>axios を使ってサーバにリクエストを送るので axios をインストールします。</p>\n<pre><code>npm install axios\n</code></pre>\n<p>axios で異なるオリジンに対してリクエストを送ると、クロスドメイン対応と pre-flight の対応が必要になります。OPTIONS メソッドで Pre-flight というリクエストが送られます。（あまり詳しくないので<a href=\"https://qiita.com/shimpeiws/items/0cd53ac9da3a7fd645b9\">ここを参考</a>にしました。これに対応するためにサーバ側を少し変更します。</p>\n<p>まずクロスドメインに対応するために、<br>rack-cors モジュールをインストールし、</p>\n<pre><code>gem &#39;rack-cors&#39;\n</code></pre>\n<p>config/initializers/cors.rb を以下にようにします。</p>\n<pre><code class=\"language-ruby\">Rails.application.config.middleware.insert_before 0, Rack::Cors do\n  allow do\n    origins &#39;*&#39;\n\n    resource &#39;*&#39;,\n      headers: :any,\n      methods: [:get, :post, :put, :patch, :delete, :options, :head]\n  end\nend\n</code></pre>\n<p>config/routes.rb に options リクエストが来た時のルーティングを追加します。</p>\n<pre><code class=\"language-ruby\">match &#39;*path&#39; =&gt; &#39;options_request#preflight&#39;, via: :options\n</code></pre>\n<p>controller/options_request_controller.rb に以下を追加します。</p>\n<pre><code class=\"language-ruby\">class OptionsRequestController &lt; ApplicationController\n  ACCESS_CONTROL_ALLOW_METHODS = %w(GET OPTIONS).freeze\n  ACCESS_CONTROL_ALLOW_HEADERS = %w(Accept Origin Content-Type Authorization).freeze\n\n  def preflight\n    set_preflight_headers!\n    head :ok\n  end\n\n  private\n\n  def set_preflight_headers!\n    response.headers[&#39;Access-Control-Max-Age&#39;] = ACCESS_CONTROL_MAX_AGE\n    response.headers[&#39;Access-Control-Allow-Headers&#39;] = ACCESS_CONTROL_ALLOW_HEADERS.join(&#39;,&#39;)\n    response.headers[&#39;Access-Control-Allow-Methods&#39;] = ACCESS_CONTROL_ALLOW_METHODS.join(&#39;,&#39;)\n  end\nend\n</code></pre>\n<p>さて、これで task をサーバから GET できるようになったと思います。<br>データは予め curl で post して下さい。</p>\n<p>次にデータを POST するために form を追加しましょう。<br>form の値を newTask というデータに bind したので、data に追加します。<br>form に入力した値を axios でリクエストするメソッドを methods の中に追加します。</p>\n<p>まとめると以下のコードになります。</p>\n<pre><code class=\"language-js\">&lt;template&gt;\n  &lt;div id=&quot;app&quot;&gt;\n    &lt;form v-on:submit.prevent=&quot;postTask&quot;&gt;\n      &lt;input id=&quot;new-task-form&quot; type=&quot;text&quot; v-model=&quot;newTask&quot; placeholder=&quot;やりたいことは...&quot;&gt;\n    &lt;/form&gt;\n    &lt;ul id=&quot;task-list&quot;&gt;\n      &lt;li class=&quot;task&quot; v-for=&quot;task in tasks&quot;&gt;&lt;p&gt;{{ task.text }}&lt;/p&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport axios from &#39;axios&#39;;\n\nconst hostName = &#39;localhost:3000&#39;;\nconst path = &#39;/api/tasks&#39;\n\nexport default {\n  name: &#39;app&#39;,\n  data () {\n    return {\n      tasks: [],\n      newTask: &#39;&#39;,\n    }\n  },\n  methods: {\n    getTasks: function() {\n      axios.get(`http://${hostName}${path}`)\n        .then((response) =&gt; {\n          this.tasks = response.data;\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n    postTask: function() {\n      axios.post(`http://${hostName}${path}`,\n          `task[text]=${this.newTask}`\n        )\n        .then((response) =&gt; {\n          this.getTasks();\n          this.newTask = &#39;&#39;;\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n    deleteTask: function(id) {\n      axios.delete(`http://${hostName}${path}/${id}`)\n        .then((response) =&gt; {\n          this.getTasks();\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    }\n  },\n  mounted: function() {\n    this.getTasks();\n  }\n}\n&lt;/script&gt;\n</code></pre>\n<p>最後に task を DELETE するためのボタンを追加し、ボタンが押された時に axios で DELETE を送るメソッドを追加します。ついでに scss でスタイリングを行うと以下のようなコードになります。</p>\n<pre><code class=\"language-js\">&lt;template&gt;\n  &lt;div id=&quot;app&quot;&gt;\n    &lt;form v-on:submit.prevent=&quot;postTask&quot;&gt;\n      &lt;input id=&quot;new-task-form&quot; type=&quot;text&quot; v-model=&quot;newTask&quot; placeholder=&quot;やりたいことは...&quot;&gt;\n    &lt;/form&gt;\n    &lt;ul id=&quot;task-list&quot;&gt;\n      &lt;li class=&quot;task&quot; v-for=&quot;task in tasks&quot;&gt;&lt;p&gt;{{ task.text }}&lt;/p&gt;&lt;button class=&quot;delete-button&quot; v-on:click=&quot;deleteTask(task.id)&quot;&gt;×&lt;/button&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport axios from &#39;axios&#39;;\n\nconst hostName = &#39;localhost:3000&#39;;\nconst path = &#39;/api/tasks&#39;\n\nexport default {\n  name: &#39;app&#39;,\n  data () {\n    return {\n      tasks: [],\n      newTask: &#39;&#39;,\n    }\n  },\n  methods: {\n    getTasks: function() {\n      axios.get(`http://${hostName}${path}`)\n        .then((response) =&gt; {\n          this.tasks = response.data;\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n    postTask: function() {\n      axios.post(`http://${hostName}${path}`,\n          `task[text]=${this.newTask}`\n        )\n        .then((response) =&gt; {\n          this.getTasks();\n          this.newTask = &#39;&#39;;\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n    deleteTask: function(id) {\n      axios.delete(`http://${hostName}${path}/${id}`)\n        .then((response) =&gt; {\n          this.getTasks();\n        })\n        .catch(function(error) {\n          console.log(error);\n        });\n    },\n  },\n  mounted: function() {\n    this.getTasks();\n  }\n}\n&lt;/script&gt;\n\n&lt;style lang=&quot;scss&quot;&gt;\n\n$list-item-height:   30px;\n\nhtml {\n  height: 100%;\n}\n\nbody {\n  height: 100%;\n  margin: 0;\n}\n\n#app {\n  font-family: &#39;Avenir&#39;, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  color: #2c3e50;\n}\n\n#new-task-form {\n  width: 100%;\n  height: $list-item-height;\n}\n\n#task-list {\n  width: 100%;\n  list-style-type: none;\n  margin: 0;\n  padding: 0;\n}\n\n.task {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  width: 100%;\n  height: $list-item-height;\n  border-bottom: dashed 1px gray;\n\n  p {\n    margin: 0;\n    padding-left: 10px;\n  }\n}\n\n.delete-button {\n  width: 20px;\n  height: 20px;\n  margin: 0 8px;\n  background-color: gray;\n  color: white;\n  border: none;\n  border-radius: 50%;\n}\n\n&lt;/style&gt;\n</code></pre>\n<p>これで、完成です！UPDATE 機能はまだ実装していないので、実装してみると勉強になると思います。</p>\n"
}