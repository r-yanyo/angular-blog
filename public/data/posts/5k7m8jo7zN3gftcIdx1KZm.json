{
  "id": "5k7m8jo7zN3gftcIdx1KZm",
  "title": "JavaScriptのクロージャについて",
  "date": "2018-03-17",
  "content": "<h2>クロージャとは</h2>\n<blockquote>\n<p>クロージャは、独立した (自由な) 変数を参照する関数です。言い換えるとクロージャ内で定義された関数は、自身が作成された環境を覚えています</p>\n</blockquote>\n<p><a href=\"https://developer.mozilla.org/ja/docs/Web/JavaScript/Closures\">MDN web doc</a>より</p>\n<br>\n関数を実行するたびに変数をincrementする関数を作るとすると、一般的には以下のようにグローバル変数が必要になる。\n\n<h3>実行するたびcntを１増やす</h3>\n<pre><code class=\"language-js\">let cnt = 0;\n\nfunction g(){\n  cnt ++;\n}\n\nconsole.log(cnt);\ng();\nconsole.log(cnt);\n</code></pre>\n<h3>実行結果</h3>\n<pre><code>0\n1\n</code></pre>\n<br>\nグローバル変数を使わないで書こうとすると以下のように失敗する。\n\n<h3>実行するたびcntを１増やしたい(失敗)</h3>\n<pre><code class=\"language-js\">function h(){\n  var cnt = 0;\n  console.log(cnt);\n  cnt++;\n}\n\nh();\nh();\n</code></pre>\n<h3>実行結果</h3>\n<pre><code>0\n0\n</code></pre>\n<br>\nしかし、クロージャを利用することでグローバル変数を使わずに実現出来る。当然変数nは外から参照出来ない。\n\n<h3>クロージャを利用した例</h3>\n<pre><code class=\"language-js\">function f(){\n  let n = 0;\n  return {\n    show : function(){\n      console.log(&#39;n is &#39; + n);\n    },\n    inc : function(){\n      n ++;\n    }\n  }\n}\n\nconst count = f();\n\ncount.show();\ncount.inc();\ncount.show();\nconsole.log(count.n);\n</code></pre>\n<h3>実行結果</h3>\n<pre><code>n is 0\nn is 1\nundefined\n</code></pre>\n<h2>クロージャを使う利点</h2>\n<p>オブジェクト指向で言う、外部から見えない<strong>プライベートな変数</strong>を作ることが出来る。これによりグローバル変数を使わなくては実現出来なかった処理を、グローバル変数無しで実現出来る。</p>\n"
}